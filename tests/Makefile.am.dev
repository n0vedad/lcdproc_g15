## Process this file with automake to produce Makefile.in
# G-Series Comprehensive Test Suite
# SPDX-License-Identifier: GPL-2.0+

# Test programs (executable tests only)
check_PROGRAMS = test_unit_g15 test_integration_g15

# Additional programs built for testing (not run as tests)
noinst_PROGRAMS = mock_g15

# Test source files
test_unit_g15_SOURCES = \
	test_unit_g15.c \
	mock_hidraw_lib.c \
	mock_hidraw_lib.h

# Integration test sources
test_integration_g15_SOURCES = \
	test_integration_g15.c

mock_g15_SOURCES = \
	mock_g15.c \
	mock_hidraw_lib.c \
	mock_hidraw_lib.h

# Include paths for tests
test_unit_g15_CPPFLAGS = \
	-I$(top_srcdir) \
	-I$(top_srcdir)/server/drivers \
	-I$(top_srcdir)/shared

test_integration_g15_CPPFLAGS = \
	-I$(top_srcdir) \
	-I$(top_srcdir)/server \
	-I$(top_srcdir)/shared

mock_g15_CPPFLAGS = \
	-I$(top_srcdir) \
	-I$(top_srcdir)/server/drivers \
	-I$(top_srcdir)/shared

# Compiler flags for tests
test_unit_g15_CFLAGS = \
	$(AM_CFLAGS) \
	-Wall -Wextra -std=c11 -g -O0

test_integration_g15_CFLAGS = \
	$(AM_CFLAGS) \
	-Wall -Wextra -std=c11 -g -O0

mock_g15_CFLAGS = \
	$(AM_CFLAGS) \
	-Wall -Wextra -std=c11 -g -O0

# Link with shared libraries if needed
test_unit_g15_LDADD = \
	$(top_builddir)/shared/libLCDstuff.a

test_integration_g15_LDADD = \
	$(top_builddir)/shared/libLCDstuff.a

mock_g15_LDADD = \
	$(top_builddir)/shared/libLCDstuff.a

# Run tests with 'make check'
TESTS = $(check_PROGRAMS)

# Standard check runs basic tests only
# For comprehensive testing, run: make test-full

# Test runner script
EXTRA_DIST = README.md

# Custom test targets for convenience
.PHONY: test-verbose test-g15 test-g510 test-scenarios test-scenario-detection test-scenario-rgb test-scenario-macros test-scenario-failures test-memcheck test-coverage test-compilers test-full test-integration test-mock test-server test-clients test-e2e

# Run tests with verbose output
test-verbose: $(check_PROGRAMS)
	@echo "🧪 Running G-Series comprehensive tests (verbose)..."
	@echo "========================================================="
	./test_unit_g15 --verbose || true

# Test specific device categories
test-g15: $(check_PROGRAMS)
	@echo "🧪 Testing G15 devices specifically..."
	./test_unit_g15 --device-filter=g15 || true

test-g510: $(check_PROGRAMS)
	@echo "🧪 Testing G510 devices specifically..."
	./test_unit_g15 --device-filter=g510 || true

# Test different scenarios - all together
test-scenarios: test-scenario-detection test-scenario-rgb test-scenario-macros test-scenario-failures
	@echo "✅ All test scenarios completed"

# Individual test scenarios
test-scenario-detection: $(check_PROGRAMS)
	@echo "🧪 Scenario 1: Device detection testing"
	@./test_unit_g15 --test-detection || true
	@echo ""

test-scenario-rgb: $(check_PROGRAMS)
	@echo "🧪 Scenario 2: RGB color testing"
	@./test_unit_g15 --test-rgb || true
	@echo ""

test-scenario-macros: $(check_PROGRAMS)
	@echo "🧪 Scenario 3: Macro system testing"
	@./test_unit_g15 --test-macros || true
	@echo ""

test-scenario-failures: $(check_PROGRAMS)
	@echo "🧪 Scenario 4: Device failure handling"
	@./test_unit_g15 --test-failures || true
	@echo ""

# Memory leak detection (valgrind required)
test-memcheck: $(check_PROGRAMS)
	@echo "🔍 Running memory leak detection..."
	@if command -v valgrind >/dev/null 2>&1; then \
		echo "Running valgrind memory analysis..."; \
		valgrind --leak-check=full --error-exitcode=1 --quiet ./test_unit_g15 > /dev/null 2>&1 && \
		echo "✅ No memory leaks detected" || \
		{ echo "❌ Memory issues detected - run manually: valgrind --leak-check=full ./test_unit_g15"; exit 1; }; \
	else \
		echo "❌ valgrind not installed - install with: sudo pacman -S valgrind"; \
		exit 1; \
	fi

# Test coverage analysis (requires llvm and gcovr)
test-coverage:
	@echo "📊 Running test coverage analysis..."
	@echo "===================================="
	@# Check dependencies
	@if ! command -v llvm-cov >/dev/null 2>&1; then \
		echo "❌ llvm-cov not found - install with: sudo pacman -S llvm"; \
		exit 1; \
	fi; \
	if ! command -v gcovr >/dev/null 2>&1; then \
		echo "❌ gcovr not found - install with: sudo pacman -S gcovr"; \
		exit 1; \
	fi
	@# Clean previous coverage data
	@echo "🧹 Cleaning previous coverage data..."
	@rm -f *.gcov *.gcno *.gcda coverage.xml coverage.html coverage.info
	@# Build with coverage flags
	@echo "🔧 Building with coverage flags..."
	@$(MAKE) clean >/dev/null 2>&1
	@$(MAKE) CC=clang CFLAGS="-Wall -Wextra -std=c11 -g -O0 --coverage" test_unit_g15
	@# Run tests to generate coverage data
	@echo "🧪 Running tests to generate coverage data..."
	@./test_unit_g15 >/dev/null 2>&1 || true
	@# Generate coverage report
	@echo "📈 Generating coverage report..."
	@llvm-cov gcov *.gcno >/dev/null 2>&1 || echo "⚠️ Some coverage files may not have been generated"
	@if ls *.gcov >/dev/null 2>&1; then \
		gcovr --gcov-executable="llvm-cov gcov" --xml coverage.xml --html coverage.html . 2>/dev/null || echo "⚠️ gcovr failed, continuing..."; \
		if [ -f coverage.xml ]; then \
			echo "📋 Coverage Summary:"; \
			gcovr --gcov-executable="llvm-cov gcov" . 2>/dev/null || echo "⚠️ Could not generate summary"; \
		fi; \
		echo "📊 Individual File Coverage:"; \
		find . -name "*.gcov" -exec echo "File: {}" \; -exec head -3 {} \; 2>/dev/null || echo "No detailed coverage files found"; \
		echo ""; \
		echo "✅ Coverage analysis complete!"; \
		echo "📄 Coverage files: *.gcov, coverage.xml, coverage.html"; \
	else \
		echo "❌ No coverage data generated - check build flags"; \
		exit 1; \
	fi


# Multi-compiler testing - builds entire project with different compilers
test-compilers: 
	@echo "🔧 Testing with multiple compilers..."
	@for compiler in clang gcc; do \
		echo "Testing with $$compiler..."; \
		if command -v $$compiler >/dev/null 2>&1; then \
			$(MAKE) mostlyclean >/dev/null 2>&1; \
			if $(MAKE) -C .. -f Makefile CC=$$compiler mostlyclean >/dev/null 2>&1 && $(MAKE) -C .. -f Makefile CC=$$compiler all >/dev/null 2>&1 && $(MAKE) CC=$$compiler check >/dev/null 2>&1; then \
				echo "✅ $$compiler build and test successful"; \
			else \
				echo "❌ $$compiler build failed"; \
			fi; \
		else \
			echo "⚠️ $$compiler not available"; \
		fi; \
	done

# Comprehensive test suite (includes memory leak detection)
test-full: $(check_PROGRAMS)
	@echo "🚀 Running comprehensive test suite..."
	@echo "====================================="
	@echo "1️⃣ Basic functionality tests:"
	@$(MAKE) check
	@echo ""
	@echo "2️⃣ Memory leak detection:"
	@if [ "$$CI" = "true" ]; then \
		echo "⚠️  Memory leak detection skipped in CI environment"; \
		echo "CI containers have known valgrind issues"; \
	else \
		$(MAKE) test-memcheck; \
	fi
	@echo ""
	@echo "🎉 Comprehensive test suite completed successfully!"

# CI/CD test suite - ensures entire project builds and tests pass  
test-ci: $(check_PROGRAMS) check
	@echo ""
	@echo "🚀 Running CI test suite..."
	@echo "================================"
	@echo "1️⃣ Basic functionality tests:"
	@$(MAKE) test-full
	@echo ""
	@echo "2️⃣ Multi-compiler compatibility:"
	@$(MAKE) test-compilers

# Integration test targets
test-integration: test_integration_g15 mock_g15
	@echo "🧪 Running integration test suite..."
	@echo "===================================="
	@echo "1️⃣ Starting G15 hardware mock server..."
	@./mock_g15 &
	@MOCK_PID=$$!; \
	sleep 2; \
	echo "2️⃣ Running integration tests..."; \
	./test_integration_g15; \
	TEST_RESULT=$$?; \
	echo "3️⃣ Shutting down mock server..."; \
	kill $$MOCK_PID 2>/dev/null || true; \
	wait $$MOCK_PID 2>/dev/null || true; \
	if [ $$TEST_RESULT -eq 0 ]; then \
		echo "🎉 Integration tests completed successfully!"; \
	else \
		echo "❌ Integration tests failed!"; \
		exit 1; \
	fi

# Run only the mock server for debugging
test-mock: mock_g15
	@echo "🎮 Starting G15 integration mock server..."
	@echo "Press Ctrl+C to stop"
	@./mock_g15

# Test only server components
test-server: test_integration_g15
	@echo "🚀 Testing LCDd server functionality..."
	@./test_integration_g15 --server-only || echo "Server tests completed"

# Test only client components  
test-clients: test_integration_g15
	@echo "📱 Testing client functionality..."
	@./test_integration_g15 --clients-only || echo "Client tests completed"

# End-to-end integration tests
test-e2e: test-integration
	@echo "🔄 Running end-to-end integration tests..."
	@echo "Full server + client + mock hardware workflow"
	@$(MAKE) test-integration

# All targets are now managed via root Makefile help
# Use 'make help' from project root for complete command list

# Clean up test artifacts
clean-local:
	-rm -f *.log *.gcov *.gcno *.gcda coverage.xml coverage.html coverage.info
	-rm -f test_output.log build.log