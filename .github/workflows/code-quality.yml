# GitHub Actions workflow for lcdproc-g15 code quality checks
# Copyright (C) 2025 n0vedad <https://github.com/n0vedad/>
#
# This workflow is released under the same license as the project (GPL v2)

name: Code Quality

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  formatting:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y npm wget gpg
        # Add LLVM repository for clang tools
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-20 main" | sudo tee /etc/apt/sources.list.d/llvm.list
        sudo apt-get update
        # Install clang tools
        sudo apt-get install -y clang-format-20 clang-tidy-20
        # Make clang tools the default
        sudo ln -sf /usr/bin/clang-format-20 /usr/bin/clang-format
        sudo ln -sf /usr/bin/clang-tidy-20 /usr/bin/clang-tidy
        npm install
    
    - name: Setup environment for make format-check
      run: |
        # Create minimal environment for our make format-check to work
        echo "Setting up environment..."
        echo "clang-format version:"
        clang-format --version
        # Install formatting hooks (creates .git/hooks/pre-commit)
        ./setup-hooks.sh install
        # Generate Makefile from Makefile.am
        sudo apt-get install -y autoconf automake
        ./autogen.sh
        # Configure to generate actual Makefile
        ./configure --prefix=/usr --sbindir=/usr/bin --sysconfdir=/etc --enable-libusb --enable-lcdproc-menus --enable-stat-smbfs --enable-drivers=g15,linux_input
    
    - name: Run format check
      run: |
        echo "🔍 Running format check using project's Makefile system..."
        # First check if our Makefile was created correctly
        echo "Available make targets:"
        make -n format-check || echo "format-check target not found"
        # Use our intelligent format-check system
        make format-check
    
    - name: Suggest fixes on failure
      if: failure()
      run: |
        echo "❌ Code formatting issues found!"
        echo "💡 Fix locally with: make format"
        echo "💡 Or run: git commit --no-verify (not recommended)"
        echo ""
        echo "ℹ️  The CI uses the same 'make format-check' that you can run locally"
        exit 1

  build-test:
    runs-on: ubuntu-latest
    container: archlinux:latest
    needs: formatting
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Arch build environment
      run: |
        # Install base tools and create non-root user for AUR
        pacman -Sy --noconfirm base-devel git sudo clang
        useradd -m -G wheel -s /bin/bash builder
        echo 'builder ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
    
    - name: Install AUR dependencies
      run: |
        # Switch to builder user and install AUR packages
        sudo -u builder bash -c '
          cd /home/builder
          git clone https://aur.archlinux.org/libg15.git
          cd libg15 && makepkg -si --noconfirm
          cd ..
          git clone https://aur.archlinux.org/libg15render.git  
          cd libg15render && makepkg -si --noconfirm
        '
        # Install other dependencies
        pacman -S --noconfirm gcc make autoconf automake libusb libftdi
    
    - name: Build project with full dependencies
      run: |
        export PKGBUILD_MODE=1
        ./autogen.sh
        ./configure --prefix=/usr --sbindir=/usr/bin --sysconfdir=/etc --enable-libusb --enable-lcdproc-menus --enable-stat-smbfs --enable-drivers=g15,linux_input
        make
    
    - name: Check for build warnings
      run: |
        echo "✅ Build completed successfully"
