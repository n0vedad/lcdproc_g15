# GitHub Actions workflow for lcdproc-g15 code quality checks
# Copyright (C) 2025 n0vedad <https://github.com/n0vedad/>
#
# This workflow is released under the same license as the project (GPL v2)

name: Code Quality

on:
  push:
    branches: [ master ]
    paths:
      - '**.c'
      - '**.h' 
      - '**.am'
      - 'configure.ac'
      - 'GNUmakefile'
      - '.clang-format'
      - '.clang-tidy'
      - 'package*.json'
      - 'PKGBUILD'
      - '.github/workflows/code-quality.yml'
  pull_request:
    branches: [ master ]
    paths:
      - '**.c'
      - '**.h'
      - '**.am'
      - 'configure.ac'
      - 'GNUmakefile'
      - '.clang-format'
      - '.clang-tidy'
      - 'package*.json'
      - 'PKGBUILD'

jobs:
  formatting:
    runs-on: ubuntu-latest
    container: archlinux:latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full git history for proper git repository
    
    - name: Install dependencies
      run: |
        # Install base development tools
        pacman -Sy --noconfirm base-devel git clang gcc make autoconf automake bear npm
        # Install clang-tools for formatting and static analysis
        pacman -Sy --noconfirm clang-tools-extra
        # Install standard hardware libraries
        pacman -Sy --noconfirm libusb libftdi-compat
        # Create non-root user for AUR builds
        useradd -m -s /bin/bash builder
        echo 'builder ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
        # Install G15 libraries from AUR
        sudo -u builder bash -c '
          cd /home/builder
          git clone https://aur.archlinux.org/libg15.git
          cd libg15 && makepkg -si --noconfirm
          cd ..
          git clone https://aur.archlinux.org/libg15render.git  
          cd libg15render && makepkg -si --noconfirm
        '
        
        # Install npm dependencies for prettier
        npm install
    
    - name: Setup build environment
      run: |
        echo "Setting up development build environment..."
        echo "clang-format version:"
        clang-format --version
        # Ensure git repository is properly initialized in container
        git config --global --add safe.directory $(pwd)
        if [ ! -d ".git" ]; then
          echo "‚ö†Ô∏è Initializing git repository for container environment..."
          git init
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Initial commit for CI environment"
        fi
        # Install formatting hooks (creates .git/hooks/pre-commit)
        make setup-hooks-install
        # Setup development build with debug drivers
        CI=true make dev
    
    - name: Run format check
      run: |
        echo "üîç Running format check using project's Makefile system..."
        # Use our intelligent format-check system
        make format-check
    
    - name: Suggest fixes on failure
      if: failure()
      run: |
        echo "‚ùå Code formatting issues found!"
        echo "üí° Fix locally with: make format"
        echo "üí° Or run: git commit --no-verify (not recommended)"
        echo ""
        echo "‚ÑπÔ∏è  The CI uses the same 'make format-check' that you can run locally"
        exit 1

  static-analysis:
    runs-on: ubuntu-latest
    container: archlinux:latest
    needs: formatting
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full git history for proper git repository
    
    - name: Install dependencies
      run: |
        # Install base development tools
        pacman -Sy --noconfirm base-devel git clang gcc make autoconf automake bear npm
        # Install clang-tools for formatting and static analysis
        pacman -Sy --noconfirm clang-tools-extra
        # Install standard hardware libraries
        pacman -Sy --noconfirm libusb libftdi-compat
        # Create non-root user for AUR builds
        useradd -m -s /bin/bash builder
        echo 'builder ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
        # Install G15 libraries from AUR
        sudo -u builder bash -c '
          cd /home/builder
          git clone https://aur.archlinux.org/libg15.git
          cd libg15 && makepkg -si --noconfirm
          cd ..
          git clone https://aur.archlinux.org/libg15render.git  
          cd libg15render && makepkg -si --noconfirm
        '
    
    - name: Setup and run static analysis
      run: |
        # Ensure git repository is properly initialized in container
        git config --global --add safe.directory $(pwd)
        if [ ! -d ".git" ]; then
          echo "‚ö†Ô∏è Initializing git repository for container environment..."
          git init
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Initial commit for CI environment"
        fi
        # Setup development build with Git hooks
        make setup-hooks-install
        make dev
        echo "üîç Running static code analysis..."
        make lint || echo "Static analysis completed with warnings (non-blocking)"
    
    - name: Test comprehensive build
      run: |
        echo "üõ†Ô∏è Running comprehensive test suite..."
        make test-ci
        
  arch-build-test:
    runs-on: ubuntu-latest
    container: archlinux:latest
    needs: formatting
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full git history for proper git repository
    
    - name: Setup Arch build environment
      run: |
        # Install base tools and create non-root user for AUR
        # Note: clang is the primary compiler for this project
        pacman -Sy --noconfirm base-devel git sudo clang make autoconf automake bear npm
        useradd -m -G wheel -s /bin/bash builder
        echo 'builder ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
    
    - name: Install AUR dependencies
      run: |
        # Switch to builder user and install AUR packages
        sudo -u builder bash -c '
          cd /home/builder
          git clone https://aur.archlinux.org/libg15.git
          cd libg15 && makepkg -si --noconfirm
          cd ..
          git clone https://aur.archlinux.org/libg15render.git  
          cd libg15render && makepkg -si --noconfirm
        '
        # Install other dependencies
        pacman -S --noconfirm libusb libftdi-compat ydotool
    
    - name: Build and test project with full dependencies
      run: |
        # Ensure git repository is properly initialized in container
        git config --global --add safe.directory $(pwd)
        if [ ! -d ".git" ]; then
          echo "‚ö†Ô∏è Initializing git repository for container environment..."
          git init
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Initial commit for CI environment"
        fi
        # Use standard build for production testing
        CI=true make
        
        echo "üß™ Running comprehensive CI test suite..."
        # Switch to development mode for testing
        make distclean
        CI=true make dev
        make test-ci
